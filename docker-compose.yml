version: "3.9"

services:
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    command: node dist/main.js
    working_dir: /app
    volumes:
      - ./apps/api:/app
    depends_on:
      - postgres
    environment:
      - NODE_ENV=development
      - PORT=3000
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api:3000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 5

  web-automart:
    build:
      context: .
      dockerfile: apps/web-automart/Dockerfile
    command: sh -c "node node_modules/next/dist/bin/next start -p 3001"
    working_dir: /app
    volumes:
      - ./apps/web-automart:/app
    depends_on:
      - api
    environment:
      - NODE_ENV=production
      - PORT=3001
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://web-automart:3001/api/healthz"]
      interval: 15s
      timeout: 5s
      retries: 5

  web-autotrader:
    build:
      context: .
      dockerfile: apps/web-autotrader/Dockerfile
    command: sh -c "node node_modules/next/dist/bin/next start -p 3002"
    working_dir: /app
    volumes:
      - ./apps/web-autotrader:/app
    depends_on:
      - api
    environment:
      - NODE_ENV=production
      - PORT=3002
    ports:
      - "3002:3002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://web-autotrader:3002/api/healthz"]
      interval: 15s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-pkautos}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pkautos}
      - POSTGRES_DB=${POSTGRES_DB:-pkautos}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-pkautos}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  meilisearch:
    image: getmeili/meilisearch:v1.8
    environment:
      - MEILI_NO_ANALYTICS=true
    ports:
      - "7700:7700"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://meilisearch:7700/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  minio:
    image: quay.io/minio/minio:RELEASE.2024-08-03T04-33-23Z
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minio}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minio12345}
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 30s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.5
    command: start-dev --http-port=8081
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://keycloak:8081/health/live"]
      interval: 30s
      timeout: 5s
      retries: 10

volumes:
  pgdata: {}
  minio-data: {}
